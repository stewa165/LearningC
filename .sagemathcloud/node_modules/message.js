// Generated by CoffeeScript 1.9.2

/*
#
 * Library for working with JSON messages for Salvus.
#
 * (c) 2012, William Stein
#
 * We use functions to work with messages to ensure some level of
 * consistency, defaults, and avoid errors from typos, etc.
#
 */

(function() {
  var defaults, message, misc, required;

  misc = require('misc');

  defaults = misc.defaults;

  required = defaults.required;

  message = function(obj) {
    return exports[obj.event] = function(opts) {
      if (opts == null) {
        opts = {};
      }
      if (opts.event != null) {
        throw Error("ValueError: must not define 'event' when calling message creation function (opts=" + (JSON.stringify(opts)) + ", obj=" + (JSON.stringify(obj)) + ")");
      }
      return defaults(opts, obj);
    };
  };

  message({
    event: 'compute_server_status',
    status: void 0
  });

  message({
    event: 'compute',
    project_id: void 0,
    action: required,
    args: void 0,
    param: void 0,
    id: void 0
  });

  message({
    event: 'project_state_update',
    project_id: required,
    state: required,
    time: required,
    state_error: void 0
  });

  message({
    event: 'start_session',
    type: required,
    project_id: void 0,
    session_uuid: void 0,
    params: void 0,
    id: void 0,
    limits: void 0
  });

  message({
    event: 'session_started',
    id: void 0,
    session_uuid: void 0,
    limits: void 0,
    data_channel: void 0
  });

  message({
    event: 'session_reconnect',
    session_uuid: void 0,
    data_channel: void 0
  });

  message({
    event: 'project_session_info',
    id: void 0,
    project_id: void 0,
    info: void 0
  });

  message({
    event: 'project_status',
    id: void 0,
    project_id: void 0,
    status: void 0
  });

  message({
    event: 'project_get_state',
    id: void 0,
    project_id: void 0,
    state: void 0
  });

  message({
    event: 'connect_to_session',
    id: void 0,
    type: required,
    project_id: required,
    session_uuid: required,
    params: void 0
  });

  message({
    event: 'session_connected',
    id: void 0,
    session_uuid: required,
    data_channel: void 0,
    history: void 0
  });

  message({
    event: 'session_description',
    pid: required,
    limits: void 0
  });

  message({
    event: 'send_signal',
    id: void 0,
    session_uuid: void 0,
    pid: void 0,
    signal: 2
  });

  message({
    event: 'signal_sent',
    id: required
  });

  message({
    event: 'restart_session',
    session_uuid: required,
    id: void 0
  });

  message({
    event: 'terminate_session',
    project_id: void 0,
    session_uuid: void 0,
    reason: void 0,
    done: void 0
  });

  message({
    event: 'execute_code',
    id: void 0,
    code: required,
    data: void 0,
    session_uuid: void 0,
    cell_id: void 0,
    preparse: true,
    allow_cache: true
  });

  message({
    event: 'output',
    id: void 0,
    stdout: void 0,
    stderr: void 0,
    html: void 0,
    md: void 0,
    tex: void 0,
    d3: void 0,
    hide: void 0,
    show: void 0,
    auto: void 0,
    javascript: void 0,
    interact: void 0,
    obj: void 0,
    file: void 0,
    raw_input: void 0,
    done: false,
    session_uuid: void 0,
    once: void 0,
    clear: void 0,
    events: void 0
  });

  message({
    event: 'execute_javascript',
    session_uuid: void 0,
    code: required,
    obj: void 0,
    coffeescript: false,
    cell_id: void 0
  });

  message({
    event: 'introspect',
    id: void 0,
    session_uuid: required,
    line: required,
    preparse: true
  });

  message({
    event: 'introspect_completions',
    id: void 0,
    target: required,
    completions: required
  });

  message({
    event: 'introspect_docstring',
    id: void 0,
    target: required,
    docstring: required
  });

  message({
    event: 'introspect_source_code',
    id: void 0,
    target: required,
    source_code: required
  });

  message({
    event: 'get_usernames',
    id: void 0,
    account_ids: required
  });

  message({
    event: 'usernames',
    id: void 0,
    usernames: required
  });

  message({
    event: 'codemirror_get_session',
    path: void 0,
    session_uuid: void 0,
    project_id: required,
    id: void 0
  });

  message({
    event: 'codemirror_session',
    id: void 0,
    session_uuid: required,
    path: required,
    content: required,
    readonly: false
  });

  message({
    event: 'codemirror_revision_tracking',
    id: void 0,
    session_uuid: required,
    enable: required
  });

  message({
    event: 'codemirror_diffsync',
    id: void 0,
    session_uuid: void 0,
    edit_stack: required,
    last_version_ack: required
  });

  message({
    event: 'codemirror_diffsync_ready',
    session_uuid: void 0
  });

  message({
    event: 'codemirror_diffsync_retry_later',
    id: void 0
  });

  message({
    event: 'codemirror_write_to_disk',
    id: void 0,
    session_uuid: void 0
  });

  message({
    event: 'codemirror_wrote_to_disk',
    id: void 0,
    hash: void 0
  });

  message({
    event: 'codemirror_read_from_disk',
    id: void 0,
    session_uuid: void 0
  });

  message({
    event: 'codemirror_get_content',
    id: void 0,
    session_uuid: void 0
  });

  message({
    event: 'codemirror_content',
    id: void 0,
    content: required
  });

  message({
    event: 'codemirror_disconnect',
    id: void 0,
    session_uuid: void 0
  });

  message({
    event: 'codemirror_bcast',
    session_uuid: required,
    self: void 0,
    name: void 0,
    color: void 0,
    date: void 0,
    mesg: required
  });

  message({
    event: 'codemirror_execute_code',
    id: void 0,
    code: required,
    data: void 0,
    session_uuid: required,
    preparse: true
  });

  message({
    event: 'codemirror_sage_raw_input',
    value: required,
    session_uuid: required
  });

  message({
    event: 'codemirror_introspect',
    id: void 0,
    session_uuid: required,
    line: required,
    preparse: true
  });

  message({
    event: 'codemirror_send_signal',
    id: void 0,
    session_uuid: required,
    signal: 2
  });

  message({
    event: 'create_account',
    id: void 0,
    first_name: required,
    last_name: required,
    email_address: required,
    password: required,
    agreed_to_terms: required,
    token: void 0
  });

  message({
    event: 'account_creation_failed',
    id: void 0,
    reason: required
  });

  message({
    event: 'email_address_availability',
    id: void 0,
    email_address: required,
    is_available: void 0
  });

  message({
    id: void 0,
    event: 'sign_in',
    email_address: required,
    password: required,
    remember_me: false
  });

  message({
    id: void 0,
    event: 'remember_me_failed',
    reason: required
  });

  message({
    id: void 0,
    event: 'sign_in_failed',
    email_address: required,
    reason: required
  });

  message({
    event: 'signed_in',
    id: void 0,
    remember_me: required,
    hub: required,
    account_id: required,
    email_address: void 0,
    first_name: void 0,
    last_name: void 0
  });

  message({
    event: 'sign_out',
    everywhere: false,
    id: void 0
  });

  message({
    event: 'signed_out',
    id: void 0
  });

  message({
    event: 'change_password',
    id: void 0,
    email_address: required,
    old_password: "",
    new_password: required
  });

  message({
    event: 'changed_password',
    id: void 0,
    error: void 0
  });

  message({
    event: "forgot_password",
    id: void 0,
    email_address: required
  });

  message({
    event: "forgot_password_response",
    id: void 0,
    error: false
  });

  message({
    event: "reset_forgot_password",
    id: void 0,
    reset_code: required,
    new_password: required
  });

  message({
    event: "reset_forgot_password_response",
    id: void 0,
    error: false
  });

  message({
    event: 'change_email_address',
    id: void 0,
    account_id: required,
    old_email_address: "",
    new_email_address: required,
    password: ""
  });

  message({
    event: 'changed_email_address',
    id: void 0,
    error: false,
    ttl: void 0
  });

  message({
    event: 'unlink_passport',
    strategy: required,
    id: required
  });

  message({
    event: "get_account_settings",
    id: void 0,
    account_id: required
  });

  exports.restricted_account_settings = {
    plan_id: void 0,
    plan_name: void 0,
    plan_starttime: void 0,
    storage_limit: void 0,
    session_limit: void 0,
    max_session_time: void 0,
    ram_limit: void 0,
    support_level: void 0,
    email_address: void 0,
    passports: void 0,
    password_is_set: void 0,
    groups: void 0
  };

  exports.unrestricted_account_settings = {
    first_name: required,
    last_name: required,
    default_system: required,
    evaluate_key: required,
    email_new_features: required,
    email_maintenance: required,
    enable_tooltips: required,
    autosave: required,
    terminal: required,
    editor_settings: required,
    other_settings: required
  };

  exports.account_settings_defaults = {
    plan_id: 0,
    default_system: 'sage',
    evaluate_key: 'Shift-Enter',
    email_new_features: true,
    email_maintenance: true,
    enable_tooltips: true,
    autosave: 45,
    groups: void 0,
    other_settings: {
      confirm_close: false,
      mask_files: true,
      default_file_sort: 'time'
    },
    editor_settings: {
      strip_trailing_whitespace: false,
      show_trailing_whitespace: true,
      line_wrapping: true,
      line_numbers: true,
      smart_indent: true,
      electric_chars: true,
      match_brackets: true,
      auto_close_brackets: true,
      code_folding: true,
      match_xml_tags: true,
      auto_close_xml_tags: true,
      spaces_instead_of_tabs: true,
      multiple_cursors: true,
      track_revisions: true,
      extra_button_bar: true,
      first_line_number: 1,
      indent_unit: 4,
      tab_size: 4,
      bindings: "standard",
      theme: "standard",
      undo_depth: 300
    },
    terminal: {
      font_size: 14,
      color_scheme: 'default',
      font: 'monospace'
    }
  };

  message(misc.merge({}, {
    event: "account_settings",
    account_id: required,
    id: void 0,
    password: void 0
  }, exports.unrestricted_account_settings, exports.restricted_account_settings));

  message({
    event: 'account_settings_saved',
    id: void 0
  });

  message({
    event: 'error',
    id: void 0,
    error: void 0
  });

  message({
    event: 'success',
    id: void 0
  });

  message({
    event: 'reconnect',
    id: void 0,
    reason: void 0
  });

  message({
    event: 'cookies',
    id: required,
    url: "/cookies",
    get: void 0,
    set: void 0,
    value: void 0
  });

  message({
    event: 'open_project',
    id: required,
    project_id: required,
    quota: required,
    idle_timeout: required,
    ssh_public_key: required
  });

  message({
    event: 'project_opened',
    id: required
  });

  message({
    event: 'save_project',
    id: void 0,
    project_id: required
  });

  message({
    event: 'project_saved',
    id: required,
    bundle_uuids: required
  });

  message({
    event: 'project_exec',
    id: void 0,
    project_id: void 0,
    path: '',
    command: required,
    args: [],
    timeout: 10,
    max_output: void 0,
    bash: false,
    err_on_exit: true
  });

  message({
    event: 'project_exec_output',
    id: required,
    stdout: required,
    stderr: required,
    exit_code: required
  });

  message({
    event: 'project_restart',
    id: void 0,
    project_id: required
  });

  message({
    event: 'jupyter_port',
    port: void 0,
    id: void 0
  });

  message({
    event: 'close_project',
    id: void 0,
    project_id: required
  });

  message({
    event: 'project_closed',
    id: required
  });

  message({
    event: 'read_file_from_project',
    id: void 0,
    project_id: required,
    path: required,
    archive: 'tar.bz2'
  });

  message({
    event: 'file_read_from_project',
    id: required,
    data_uuid: required,
    archive: void 0
  });

  message({
    event: 'temporary_link_to_file_read_from_project',
    id: required,
    url: required
  });

  message({
    event: 'read_text_file_from_project',
    id: void 0,
    project_id: required,
    path: required
  });

  message({
    event: 'text_file_read_from_project',
    id: required,
    content: required
  });

  message({
    event: 'write_file_to_project',
    id: required,
    project_id: required,
    path: required,
    data_uuid: required
  });

  message({
    event: 'write_text_file_to_project',
    id: void 0,
    project_id: required,
    path: required,
    content: required
  });

  message({
    event: 'file_written_to_project',
    id: required
  });

  message({
    event: 'create_project',
    id: void 0,
    title: required,
    description: required,
    start: false
  });

  message({
    event: 'move_project',
    id: void 0,
    project_id: required,
    target: void 0
  });

  message({
    event: 'project_moved',
    id: void 0,
    location: required
  });

  message({
    event: 'project_created',
    id: required,
    project_id: required
  });

  message({
    event: 'get_project_info',
    project_id: required,
    id: void 0
  });

  message({
    event: 'project_info',
    info: required,
    id: void 0
  });

  message({
    event: 'project_list_updated'
  });

  message({
    event: 'user_search',
    id: void 0,
    query: required,
    limit: 20
  });

  message({
    event: 'user_search_results',
    id: void 0,
    results: required
  });

  message({
    event: 'project_users',
    id: void 0,
    users: required
  });

  message({
    event: 'invite_collaborator',
    id: void 0,
    project_id: required,
    account_id: required
  });

  message({
    event: 'remove_collaborator',
    id: void 0,
    project_id: required,
    account_id: required
  });

  message({
    event: 'invite_noncloud_collaborators',
    id: void 0,
    project_id: required,
    to: required,
    email: required
  });

  message({
    event: 'invite_noncloud_collaborators_resp',
    id: void 0,
    mesg: required
  });

  message({
    event: 'get_version',
    id: void 0,
    version: void 0
  });

  message({
    event: 'save_blob',
    id: void 0,
    sha1: required,
    ttl: void 0,
    error: void 0
  });

  message({
    event: 'remove_blob_ttls',
    id: void 0,
    uuids: required
  });

  message({
    event: 'storage',
    action: required,
    project_id: void 0,
    param: void 0,
    id: void 0
  });

  message({
    event: 'projects_running_on_server',
    id: void 0,
    projects: void 0
  });

  message({
    event: 'local_hub',
    project_id: required,
    timeout: void 0,
    id: void 0,
    multi_response: false,
    message: required
  });

  message({
    event: 'copy_path_between_projects',
    id: void 0,
    src_project_id: required,
    src_path: required,
    target_project_id: required,
    target_path: void 0,
    overwrite_newer: false,
    delete_missing: false,
    backup: false,
    timeout: void 0,
    exclude_history: false
  });

  message({
    event: 'create_task',
    task_list_id: required,
    title: "No title",
    position: 0,
    project_id: void 0,
    id: void 0
  });

  message({
    event: 'task_created',
    task_id: required,
    id: void 0
  });

  message({
    event: 'edit_task',
    task_list_id: required,
    task_id: required,
    project_id: void 0,
    id: void 0,
    title: void 0,
    position: void 0,
    done: void 0,
    data: void 0,
    sub_task_list_id: void 0,
    deleted: void 0
  });

  message({
    event: 'create_task_list',
    owners: required,
    id: void 0
  });

  message({
    event: 'task_list_created',
    task_list_id: required,
    id: void 0
  });

  message({
    event: 'edit_task_list',
    task_list_id: required,
    data: void 0,
    project_id: void 0,
    deleted: void 0,
    id: void 0
  });

  message({
    event: 'get_task_list',
    task_list_id: required,
    columns: void 0,
    include_deleted: false,
    project_id: void 0,
    id: void 0
  });

  message({
    event: 'task_list_resp',
    id: void 0,
    task_list: required
  });

  message({
    event: 'get_task_list_last_edited',
    task_list_id: required,
    project_id: void 0,
    id: void 0
  });

  message({
    event: 'set_project_task_list',
    task_list_id: required,
    project_id: required,
    id: void 0
  });

  message({
    event: 'sync_task_list',
    task_list_id: required,
    task_id: required,
    task: void 0
  });

  message({
    event: 'project_set_quotas',
    id: void 0,
    project_id: required,
    memory: void 0,
    cpu_shares: void 0,
    cores: void 0,
    disk: void 0,
    mintime: void 0,
    network: void 0
  });

  message({
    event: "print_to_pdf",
    id: void 0,
    path: required,
    options: void 0
  });

  message({
    event: 'printed_to_pdf',
    id: void 0,
    path: required
  });

  message({
    event: 'ping',
    id: void 0
  });

  message({
    event: 'pong',
    id: void 0
  });

  message({
    event: 'public_get_project_info',
    id: void 0,
    project_id: required
  });

  message({
    event: 'public_project_info',
    id: void 0,
    info: required
  });

  message({
    event: 'public_get_directory_listing',
    id: void 0,
    project_id: required,
    path: required,
    hidden: false,
    time: false,
    start: 0,
    limit: -1
  });

  message({
    event: 'public_directory_listing',
    id: void 0,
    result: required
  });

  message({
    event: 'public_get_text_file',
    id: void 0,
    project_id: required,
    path: required
  });

  message({
    event: 'public_text_file_contents',
    id: void 0,
    data: required
  });

  message({
    event: 'publish_path',
    id: void 0,
    project_id: required,
    path: required,
    description: required
  });

  message({
    event: 'unpublish_path',
    id: void 0,
    project_id: required,
    path: required
  });

  message({
    event: 'get_public_paths',
    id: void 0,
    project_id: required
  });

  message({
    event: 'public_paths',
    id: void 0,
    paths: required
  });

  message({
    event: 'copy_public_path_between_projects',
    id: void 0,
    src_project_id: required,
    src_path: required,
    target_project_id: required,
    target_path: void 0,
    overwrite_newer: false,
    delete_missing: false,
    timeout: void 0,
    exclude_history: false,
    backup: false
  });

  message({
    event: 'log_client_error',
    error: required
  });

  message({
    event: 'stripe_get_customer',
    id: void 0
  });

  message({
    event: 'stripe_customer',
    id: void 0,
    customer: void 0,
    stripe_publishable_key: void 0
  });

  message({
    event: 'stripe_create_source',
    id: void 0,
    token: required
  });

  message({
    event: 'stripe_delete_source',
    card_id: required,
    id: void 0
  });

  message({
    event: 'stripe_set_default_source',
    card_id: required,
    id: void 0
  });

  message({
    event: 'stripe_update_source',
    card_id: required,
    info: required,
    id: void 0
  });

  message({
    event: 'stripe_get_plans',
    id: void 0
  });

  message({
    event: 'stripe_plans',
    id: void 0,
    plans: required
  });

  message({
    event: 'stripe_create_subscription',
    id: void 0,
    plan: required,
    quantity: 1,
    coupon: void 0,
    projects: void 0
  });

  message({
    event: 'stripe_cancel_subscription',
    id: void 0,
    subscription_id: required,
    at_period_end: false
  });

  message({
    event: 'stripe_update_subscription',
    id: void 0,
    subscription_id: required,
    quantity: void 0,
    projects: void 0,
    plan: void 0,
    coupon: void 0
  });

  message({
    event: 'stripe_get_subscriptions',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  });

  message({
    event: 'stripe_subscriptions',
    id: void 0,
    subscriptions: void 0
  });

  message({
    event: 'stripe_get_charges',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  });

  message({
    event: 'stripe_charges',
    id: void 0,
    charges: void 0
  });

  message({
    event: 'stripe_get_invoices',
    id: void 0,
    limit: void 0,
    ending_before: void 0,
    starting_after: void 0
  });

  message({
    event: 'stripe_invoices',
    id: void 0,
    invoices: void 0
  });

  message({
    event: 'stripe_admin_create_invoice_item',
    id: void 0,
    email_address: void 0,
    account_id: void 0,
    amount: required,
    description: required
  });

  message({
    event: 'query',
    id: void 0,
    query: required,
    changes: void 0,
    multi_response: false,
    options: void 0
  });

  message({
    event: 'query_cancel',
    id: void 0
  });

  message({
    event: 'query_get_changefeed_ids',
    id: void 0,
    changefeed_ids: void 0
  });

}).call(this);
