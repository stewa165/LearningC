{"notebook_name":"learnpython.ipynb"}
"#Learning Python\n## Lindy Astl and Natalia Stewart\n"︡{"metadata":{"collapsed":false},"cell_type":"markdown"}
"# 1."︡{"metadata":{},"cell_type":"markdown"}
"Comments-- written following a '#' and used to explain the actions of your code"︡{"metadata":{},"cell_type":"markdown"}
"#this is a comment"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":34,"outputs":[]}
"Variable Declarations-- setting a variable to an object, done with '='"︡{"metadata":{},"cell_type":"markdown"}
"x = 3"︡{"metadata":{"collapsed":true,"trusted":false},"cell_type":"code","execution_count":35,"outputs":[]}
"Printing Output-- statment following 'print' and must be in the format of a string"︡{"metadata":{},"cell_type":"markdown"}
"print \"Hello World!\""︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":"Hello World!\n"}]}
"# 2."︡{"metadata":{},"cell_type":"markdown"}
"Boolean-- '0' and '1' used to represent False and True"︡{"metadata":{},"cell_type":"markdown"}
"print 0 == 1"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":"False\n"}]}
"Integer-- whole numbers, can be set to variables, used to iterate through objects(starting with 0)"︡{"metadata":{},"cell_type":"markdown"}
"print int(8.54322)"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":"8\n"}]}
"Float-- decimal numbers, used for precision "︡{"metadata":{},"cell_type":"markdown"}
"print float(3)"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":"3.0\n"}]}
"String-- put in \"\"s or ''s, similar to a sentense"︡{"metadata":{},"cell_type":"markdown"}
"print \"This is a string!!\""︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":"This is a string!!\n"}]}
"List-- collection of objects, stores sequences"︡{"metadata":{},"cell_type":"markdown"}
"lis = ['cabbage', 'lemons', 'eggs', 'milk']\nprint lis"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":"['cabbage', 'lemons', 'eggs', 'milk']\n"}]}
"Tuple-- unchangeable list, can add to but cannot change order or remove from"︡{"metadata":{},"cell_type":"markdown"}
"tup = (1, 2, 3)\nprint tup"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":"(1, 2, 3)\n"}]}
"Dictionary-- stores mappings"︡{"metadata":{},"cell_type":"markdown"}
"dic = {\"natalia\":1, \"lindy\":2, \"justin\":3}"︡{"metadata":{"collapsed":true,"trusted":false},"cell_type":"code","execution_count":43,"outputs":[]}
"Set-- order does not matter, no duplicates"︡{"metadata":{},"cell_type":"markdown"}
"{1, 1, 1, 2, 3, 3, 3} == {3, 3, 2, 2, 1, 3, 2, 1, 2, 1}"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]}
"# 3."︡{"metadata":{},"cell_type":"markdown"}
"if-then-else-- if, elif, else; checks different cases and executes code following each case"︡{"metadata":{},"cell_type":"markdown"}
"i = 3\n\nif i == 0:\n    print \"It's zero\"\nelif i == 3:\n    print \"It's three!\"\nelse:\n    print \"Try again\""︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":"It's three!\n"}]}
"for loop-- iterates over objects in a list\n            for object in list:\n            ..."︡{"metadata":{},"cell_type":"markdown"}
"for i in range(5):\n    print i"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":"0\n1\n2\n3\n4\n"}]}
"while loop-- continue until a specified condition is met"︡{"metadata":{},"cell_type":"markdown"}
"x = 0\nwhile x <= 3:\n    print x\n    x += 1"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":"0\n1\n2\n3\n"}]}
"# 4."︡{"metadata":{"collapsed":true},"cell_type":"markdown"}
"defining a function with a name-- use def...(inputs):, uses return instead of print"︡{"metadata":{},"cell_type":"markdown"}
"#b subtract a\ndef subtract(a, b):\n    return b - a"︡{"metadata":{"collapsed":true,"trusted":false},"cell_type":"code","execution_count":48,"outputs":[]}
"subtract(6, 10)"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"4"},"metadata":{}}]}
"including docstring-- self written comment that will appear while working from the command line and calling for help"︡{"metadata":{},"cell_type":"markdown"}
"def subtract(a, b):\n    \"function subtracting a from b\"\n    return b - a"︡{"metadata":{"collapsed":true,"trusted":false},"cell_type":"code","execution_count":51,"outputs":[]}
"*args-- takes any additional keyword arguments in a function, and sticks them into a list called \"args\""︡{"metadata":{},"cell_type":"markdown"}
"def natalia(*args):\n    return args\n\nnatalia(7, 77, 777)"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"(7, 77, 777)"},"metadata":{}}]}
"**kwargs-- takes any additional keyword arguments in a function, and sticks them into a dictionary called \"kwargs\" "︡{"metadata":{},"cell_type":"markdown"}
"def lindy(**kwargs):\n    return kwargs\n\nlindy(breakfast=\"granola\", lunch=\"chicken\", dinner=\"pizza\")\n"︡{"metadata":{"collapsed":false,"trusted":false},"cell_type":"code","execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"{'breakfast': 'granola', 'dinner': 'pizza', 'lunch': 'chicken'}"},"metadata":{}}]}