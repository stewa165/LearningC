"{\"notebook_name\":\"learnpython.ipynb\"}\n\"#Learning Python\\n## Lindy Astl and Natalia Stewart\\n\"︡{\"metadata\":{\"collapsed\":false},\"cell_type\":\"markdown\"}\n\"# 1.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"Comments-- written following a '#' and used to explain the actions of your code\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"#this is a comment\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":34,\"outputs\":[]}\n\"Variable Declarations-- setting a variable to an object, done with '='\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"x = 3\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":35,\"outputs\":[]}\n\"Printing Output-- statment following 'print' and must be in the format of a string\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print \\\"Hello World!\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":36,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"Hello World!\\n\"}]}\n\"# 2.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"Boolean-- '0' and '1' used to represent False and True\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print 0 == 1\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":37,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"False\\n\"}]}\n\"Integer-- whole numbers, can be set to variables, used to iterate through objects(starting with 0)\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print int(8.54322)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":38,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"8\\n\"}]}\n\"Float-- decimal numbers, used for precision \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print float(3)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":39,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"3.0\\n\"}]}\n\"String-- put in \\\"\\\"s or ''s, similar to a sentense\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print \\\"This is a string!!\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":40,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"This is a string!!\\n\"}]}\n\"List-- collection of objects, stores sequences\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"lis = ['cabbage', 'lemons', 'eggs', 'milk']\\nprint lis\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":41,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"['cabbage', 'lemons', 'eggs', 'milk']\\n\"}]}\n\"Tuple-- unchangeable list, can add to but cannot change order or remove from\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"tup = (1, 2, 3)\\nprint tup\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":42,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"(1, 2, 3)\\n\"}]}\n\"Dictionary-- stores mappings\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"dic = {\\\"natalia\\\":1, \\\"lindy\\\":2, \\\"justin\\\":3}\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":43,\"outputs\":[]}\n\"Set-- order does not matter, no duplicates\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"{1, 1, 1, 2, 3, 3, 3} == {3, 3, 2, 2, 1, 3, 2, 1, 2, 1}\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":44,\"outputs\":[{\"execution_count\":44,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"True\"},\"metadata\":{}}]}\n\"# 3.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"if-then-else-- if, elif, else; checks different cases and executes code following each case\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"i = 3\\n\\nif i == 0:\\n    print \\\"It's zero\\\"\\nelif i == 3:\\n    print \\\"It's three!\\\"\\nelse:\\n    print \\\"Try again\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":45,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"It's three!\\n\"}]}\n\"for loop-- iterates over objects in a list\\n            for object in list:\\n            ...\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"for i in range(5):\\n    print i\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":46,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"0\\n1\\n2\\n3\\n4\\n\"}]}\n\"while loop-- continue until a specified condition is met\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"x = 0\\nwhile x <= 3:\\n    print x\\n    x += 1\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":47,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"0\\n1\\n2\\n3\\n\"}]}\n\"# 4.\"︡{\"metadata\":{\"collapsed\":true},\"cell_type\":\"markdown\"}\n\"defining a function with a name-- use def...(inputs):, uses return instead of print\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"#b subtract a\\ndef subtract(a, b):\\n    return b - a\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":48,\"outputs\":[]}\n\"subtract(6, 10)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":49,\"outputs\":[{\"execution_count\":49,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"4\"},\"metadata\":{}}]}\n\"including docstring-- self written comment that will appear while working from the command line and calling for help\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def subtract(a, b):\\n    \\\"function subtracting a from b\\\"\\n    return b - a\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":51,\"outputs\":[]}\n\"*args-- takes any additional keyword arguments in a function, and sticks them into a list called \\\"args\\\"\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def natalia(*args):\\n    return args\\n\\nnatalia(7, 77, 777)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":52,\"outputs\":[{\"execution_count\":52,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"(7, 77, 777)\"},\"metadata\":{}}]}\n\"**kwargs-- takes any additional keyword arguments in a function, and sticks them into a dictionary called \\\"kwargs\\\" \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def lindy(**kwargs):\\n    return kwargs\\n\\nlindy(breakfast=\\\"granola\\\", lunch=\\\"chicken\\\", dinner=\\\"pizza\\\")\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":55,\"outputs\":[{\"execution_count\":55,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"{'breakfast': 'granola', 'dinner': 'pizza', 'lunch': 'chicken'}\"},\"metadata\":{}}]}"
{"patch":[[[[0,"a commen"],[-1,"t"],[0,"\"︡{\"meta"]],327,327,17,16]],"time":1442591735442}
{"patch":[[[[0,"a commen"],[1,"t"],[0,"\"︡{\"meta"]],327,327,16,17]],"time":1442591731442}
{"patch":[[[[-1,"{\"notebook_name\":\"learnpython.ipynb\"}\n\"#Learning Python\\n## Lindy Astl and Natalia Stewart\\n\"︡{\"metadata\":{\"collapsed\":false},\"cell_type\":\"markdown\"}\n\"# 1.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"Comments-- written following a '#' and used to explain the actions of your code\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"#this is a comment\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":34,\"outputs\":[]}\n\"Variable Declarations-- setting a variable to an object, done with '='\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"x = 3\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":35,\"outputs\":[]}\n\"Printing Output-- statment following 'print' and must be in the format of a string\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print \\\"Hello World!\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":36,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"Hello World!\\n\"}]}\n\"# 2.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"Boolean-- '0' and '1' used to represent False and True\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print 0 == 1\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":37,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"False\\n\"}]}\n\"Integer-- whole numbers, can be set to variables, used to iterate through objects(starting with 0)\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print int(8.54322)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":38,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"8\\n\"}]}\n\"Float-- decimal numbers, used for precision \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print float(3)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":39,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"3.0\\n\"}]}\n\"String-- put in \\\"\\\"s or ''s, similar to a sentense\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"print \\\"This is a string!!\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":40,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"This is a string!!\\n\"}]}\n\"List-- collection of objects, stores sequences\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"lis = ['cabbage', 'lemons', 'eggs', 'milk']\\nprint lis\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":41,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"['cabbage', 'lemons', 'eggs', 'milk']\\n\"}]}\n\"Tuple-- unchangeable list, can add to but cannot change order or remove from\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"tup = (1, 2, 3)\\nprint tup\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":42,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"(1, 2, 3)\\n\"}]}\n\"Dictionary-- stores mappings\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"dic = {\\\"natalia\\\":1, \\\"lindy\\\":2, \\\"justin\\\":3}\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":43,\"outputs\":[]}\n\"Set-- order does not matter, no duplicates\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"{1, 1, 1, 2, 3, 3, 3} == {3, 3, 2, 2, 1, 3, 2, 1, 2, 1}\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":44,\"outputs\":[{\"execution_count\":44,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"True\"},\"metadata\":{}}]}\n\"# 3.\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"if-then-else-- if, elif, else; checks different cases and executes code following each case\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"i = 3\\n\\nif i == 0:\\n    print \\\"It's zero\\\"\\nelif i == 3:\\n    print \\\"It's three!\\\"\\nelse:\\n    print \\\"Try again\\\"\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":45,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"It's three!\\n\"}]}\n\"for loop-- iterates over objects in a list\\n            for object in list:\\n            ...\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"for i in range(5):\\n    print i\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":46,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"0\\n1\\n2\\n3\\n4\\n\"}]}\n\"while loop-- continue until a specified condition is met\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"x = 0\\nwhile x <= 3:\\n    print x\\n    x += 1\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":47,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"0\\n1\\n2\\n3\\n\"}]}\n\"# 4.\"︡{\"metadata\":{\"collapsed\":true},\"cell_type\":\"markdown\"}\n\"defining a function with a name-- use def...(inputs):, uses return instead of print\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"#b subtract a\\ndef subtract(a, b):\\n    return b - a\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":48,\"outputs\":[]}\n\"subtract(6, 10)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":49,\"outputs\":[{\"execution_count\":49,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"4\"},\"metadata\":{}}]}\n\"including docstring-- self written comment that will appear while working from the command line and calling for help\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def subtract(a, b):\\n    \\\"function subtracting a from b\\\"\\n    return b - a\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":51,\"outputs\":[]}\n\"*args-- takes any additional keyword arguments in a function, and sticks them into a list called \\\"args\\\"\"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def natalia(*args):\\n    return args\\n\\nnatalia(7, 77, 777)\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":52,\"outputs\":[{\"execution_count\":52,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"(7, 77, 777)\"},\"metadata\":{}}]}\n\"**kwargs-- takes any additional keyword arguments in a function, and sticks them into a dictionary called \\\"kwargs\\\" \"︡{\"metadata\":{},\"cell_type\":\"markdown\"}\n\"def lindy(**kwargs):\\n    return kwargs\\n\\nlindy(breakfast=\\\"granola\\\", lunch=\\\"chicken\\\", dinner=\\\"pizza\\\")\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":false},\"cell_type\":\"code\",\"execution_count\":55,\"outputs\":[{\"execution_count\":55,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"{'breakfast': 'granola', 'dinner': 'pizza', 'lunch': 'chicken'}\"},\"metadata\":{}}]}"]],0,0,6318,0]],"time":1442591669842}